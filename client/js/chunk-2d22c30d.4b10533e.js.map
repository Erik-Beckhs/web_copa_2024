{"version":3,"sources":["webpack:///./node_modules/photoswipe/dist/photoswipe.esm.js"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","removeTransitionStyle","decodeImage","img","decode","catch","complete","Promise","resolve","reject","onload","onerror","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","specialKeyUsed","e","which","ctrlKey","metaKey","altKey","shiftKey","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","DOMEvents","this","_pool","target","type","listener","passive","_toggleListener","forEach","poolItem","unbind","skipPool","methodName","types","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","_updateAxis","dispatch","axis","elSize","paddingProp","data","panAreaSize","panOffset","MAX_IMAGE_WIDTH","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","optionPrefix","optionName","optionValue","Number","_parseZoomLevelOption","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","activate","deactivate","holderElement","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","appendHeavyNearby","heavyAppended","mainScroll","isShifted","defaultPrevented","append","hasSlide","remove","update","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","zoomTo","zoomAnimationDuration","point","totalPanDistance","getViewportCenterPoint","zoomFactor","correctPan","panX","panY","_applyZoomTransform","currSlide","zoom","newResolution","PAN_END_FRICTION","VERTICAL_DRAG_FRICTION","MIN_RATIO_TO_CLOSE","MIN_NEXT_SLIDE_SPEED","project","initialVelocity","decelerationRate","DragHandler","gestures","startPan","stopAll","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","mainScrollChanged","_panOrMoveMainScroll","velocity","indexDiff","mainScrollShiftDiff","getCurrSlideX","currentSlideVisibilityRatio","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","start","end","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","isPannable","moveTo","newPan","allowPanToNext","currSlideMainScrollX","isLeftToRight","isRightToLeft","wasAtMinPanPosition","wasAtMaxPanPosition","potentialPan","customFriction","correctedPan","UPPER_ZOOM_FRICTION","LOWER_ZOOM_FRICTION","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","actionName","actionFullName","toggleZoom","clickToCloseNonZoomable","toggle","call","AXIS_SWIPE_HYSTERISIS","DOUBLE_TAP_DELAY","MIN_TAP_DISTANCE","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","supportsTouch","maxTouchPoints","drag","tapHandler","on","events","add","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","change","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","click","tapDelay","doubleTapAction","_tapTimer","doubleTap","setTimeout","tap","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MAIN_SCROLL_END_FRICTION","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","resize","_currPositionIndex","_prevPositionIndex","i","setAttribute","display","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","setIsActive","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","returnFocus","_wasFocused","focus","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_helperTimeout","_finalizeAnimation","_finished","removeEventListener","DEFAULT_NATURAL_FREQUENCY","DEFAULT_DAMPING_RATIO","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","animationLoop","_raf","easeFrame","Animations","activeAnimations","_start","isSpring","animation","stop","destroy","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","addElementHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","innerHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","toggleIndicatorClass","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","potentialZoomLevel","imageClickAction","getBoundsByElement","thumbAreaRect","getBoundingClientRect","left","top","getCroppedBoundsByElement","imageWidth","imageHeight","fillZoomLevel","offsetX","offsetY","innerRect","getThumbBounds","instance","thumbBounds","thumbnail","thumbSelector","matches","querySelector","thumbCropped","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","fn","priority","f1","f2","addFilter","removeFilter","args","apply","off","Placeholder","imageSrc","decoding","alt","src","parentNode","Content","displayedImageWidth","displayedImageHeight","isAttached","state","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","onLoaded","onError","removePlaceholder","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","errorMsgEl","errorMsg","supportsDecode","isDecoding","finally","appendImage","MIN_SLIDES_TO_CACHE","lazyLoadData","createContentFromData","lazyLoad","zoomLevel","ceil","lazyLoadSlide","getItemData","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","addToCache","setSlide","removeByIndex","indexToRemove","item","removedItem","find","PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","_domElementToItemData","galleryElement","children","childSelector","linkEl","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","_placeholder","getPlaceholderElement","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","decoded","isDelaying","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","open","goTo","removeAll","listeners","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","test","userAgent","setScrollOffset","appendHolders","init","body"],"mappings":"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","file":"js/chunk-2d22c30d.4b10533e.js","sourcesContent":["/*!\n  * PhotoSwipe 5.3.4 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\n\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = null;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n\r\n      if (this.slide.holderElement) {\r\n        this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {ElementProvider=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {ElementProvider=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n"],"sourceRoot":""}